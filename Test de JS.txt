Variables y operaciones

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
* ¬øQu√© es una variable y para qu√© sirve?: Es un espacio reservado en memoria la cual nos sirve para almacenar diferentes tipos de informaci√≥n.
* ¬øCu√°l es la diferencia entre declarar e inicializar una variable?: Al declarar una variable solo le estamos asignando el nombre de la variable, mientras que inicializar la varible es asignarle un valor a esa variable ya se de tipo n√∫merica, nombre o de forma booleana.
* ¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?: si vamos a sumar dos o m√°s n√∫meros esto lo que hara es que el valor de la variable final donde almacenaremos esa suma incremente, por ejemplo suma = numero1 + numero2, numero1 = 2 y numero2 = 7 esto quiere decir que suma = 9, mientras que si concatenamos 2 string que tiene un n√∫mero almacenado cada uno lo que hace es unirlos, por ejemplo, String1 = "4" y String2 = "6", al concatenar estos dos String nos quedaria 46
* ¬øCu√°l operador me permite sumar o concatenar?: El operador que nos permite sumar o concatenar es el de la suma +

2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:
* Nombre: String
* Apellido: String
* Nombre de usuario en Platzi: String
* Edad: Int
* Correo electr√≥nico: String
* Mayor de edad: Boolean
* Dinero ahorrado: Double
* Deudas: Double

3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.
let nombre = "Jorge"
let apellido = "Silva"
let usuarioPlatzi = "joralsiz95"
let edad = 27
let email= nomelose@gmail.com
let mayorEdad = true
let dineroAhorrado = 20000.00
let deudas = 30000.00

4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
* Nombre completo (nombre y apellido) = console.log("Mi nombre es: " + nombre + " " + apellido);
* Dinero real (dinero ahorrado menos deudas) = console.log("Mi dinero real es: " dineroAhorrado - deudas);

Funciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
* ¬øQu√© es una funci√≥n?: Es un bloque de codigo que tiene como objetivo realizar una tarea especifica y que puede ser ejecutada o invocada desde otra parte del codigo.
* ¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?: Cuando necesitamos reutilizar codigo, en vez de escribir codigo para realizar una tarea en especifico, creamos una funci√≥n y la invocamos cada vez que la necesitemos.
* ¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?: Los paramatro son las variables que recibe una funcion y los argumentos son los valores que se envian a la funci√≥n al momento de invocar dicha funci√≥n.


2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:
const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";

console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");

funtion presentar(completeName, nickname){
	return ("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");
}


Condicionales
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un condicional?: Una condici√≥n es una sentencia que si se cumple ejecutara ciertas tareas en el codigo.
¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?: Existen 4 condicionales esta el if que ejecuta un bloque de codigo si la condici√≥n establecida se cumple, esta el else, que se ejecuta cuando no se cumple la condici√≥n del if, esta el else if, que es cuando se van a agregar multiples condiciones y esta el switch, que se ejecuta cuando necesitamos que se ejecute una sola condici√≥n.
¬øPuedo combinar funciones y condicionales?: Si se puede.

const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
       break;
   case "ExpertPlus":
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
       break;
}

if (tipoDeSuscripcion == "Free"){
    return console.log("Solo puedes tomar los cursos gratis");
}else if (tipoDeSuscripcion == "Basic"){
    return console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
}else if (tipoDeSuscripcion == "Expert"){
    return console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
}else if (tipoDeSuscripcion == "ExpertPlus"){
    return console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
}else{
    return console.log("No tienes una suscripci√≥n v√°lida");
}

3Ô∏è‚É£ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).
üí° Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays u objetos y un solo condicional. üòè

let tipoDeSuscripcion = ["Free", "Basic", "Expert", "ExpertPlus"];
let infoSuscripcion = [ "solo puedes tomar los cursos gratis", "puedes tomar casi todos los cursos de Platzi durante un mes",  "puedes tomar casi todos los cursos de Platzi durante un a√±o", "t√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o"];
let usuarioSuscripcion = "free";
for (let i=0; i < tipoDeSuscripcion.length; i++) {
    if (usuarioSuscripcion == tipoDeSuscripcion[i]) {
        console.log("Si estas suscrito al plan " + tipoDeSuscripcion[i] + "en el cual" + infoSuscripcion[i]);
    }
}


Ciclos
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un ciclo?: Es un evento que ejecutara una tarea en especifico las veces que sea necesaria hasta que se cumpla la condici√≥n de salida de que declaramos.
¬øQu√© tipos de ciclos existen en JavaScript?: Exite el ciclo For y While.
¬øQu√© es un ciclo infinito y por qu√© es un problema?: Un clico infinito, es un ciclo en el cual nunca se cumple la condici√≥n de salida que declaramos y es un problema porque siempre se quedara ejecutando el ciclo y no se ejecutara el resto del codigo.
¬øPuedo mezclar ciclos y condicionales?: Si se puede.

2Ô∏è‚É£ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:
for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}

for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}

let i = 0;
while(i < 5){
    console.log("El valor de i es: " + i);
    i++;
}

let i = 10;
while (i >= 2){
    console.log("El valor de i es: " + i);
    i--;
}

3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.
üí° Pista: puedes usar la funci√≥n prompt de JavaScript.

let respuestaUsuario;

while (true) {
    respuestaUsuario = parseInt(prompt("Cu√°nto es 2 + 2?"), 10);

    if (!isNaN(respuestaUsuario) && respuestaUsuario === 4) {
        alert("¬°Felicidades! La respuesta es correcta.");
        break;
    } else {
        alert("La respuesta es incorrecta. Por favor, int√©ntalo de nuevo.");
    }
}


Listas
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un array?: Un array es una estructura de datos que almacena una colecci√≥n de elementos, donde cada elemento cuenta con un indice o una posici√≥n unica, estos elementos que se encuentran dentro del array, pueden ser de cualquier tipo.
¬øQu√© es un objeto?: Los objetos son la instacia de una clase, que son un prototipo que cuenta con propiedades y metodos definidos.
¬øCu√°ndo es mejor usar objetos o arrays?: Es mejor usar objetos cuando necesitamos organizar datos de manera estructurada y cada informaci√≥n tiene un nombre descriptivo, y usamos arrays cuando trabajamos con listas ordenadas de elementos y necesitamos acceder a ellos por √≠ndice o realizar operaciones iterativas.
¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?: Si.

2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.
let frutas = ["Pera", "Manzana", "Naranja", "Uva"];

function imprimePrimerElem(frutas){
    console.log(frutas[0]);
}

imprimePrimerElem(frutas);

3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).
let frutas = ["Pera", "Manzana", "Naranja", "Uva"];

function imprimePrimerElem(frutas){
    for (let i = 1; i <= frutas.length; i++){
        console.log("En la posici√≥n "+ i + " esta: " + frutas[i-1]);
    }
}

imprimePrimerElem(frutas);

4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).
function imprimirElementos(objeto) {
    if (typeof objeto === 'object' && objeto !== null) {
      for (let clave in objeto) {
        if (objeto.hasOwnProperty(clave)) {
          console.log(clave + ": " + objeto[clave]);
        }
      }
    } else {
      console.log("El argumento no es un objeto v√°lido.");
    }
  }
  
let persona = {
    nombre: "Jorge",
    edad: 27,
    ciudad: "Bogot√°"
};
  
imprimirElementos(persona);
